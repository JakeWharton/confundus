apply plugin: 'org.jetbrains.kotlin.jvm'
apply plugin: 'org.jetbrains.kotlin.kapt'
apply plugin: 'java-gradle-plugin'
apply from: "$rootDir/gradle/publish.gradle"

configurations {
  fixtureClasspath
}

// Append any extra dependencies to the test fixtures via a custom configuration classpath. This
// allows us to apply additional plugins in a fixture while still leveraging dependency resolution
// and de-duplication semantics.
tasks.getByName('pluginUnderTestMetadata').
    getPluginClasspath().
    from(configurations.fixtureClasspath)

dependencies {
  implementation deps.kotlin.stdlib.jdk
  compileOnly gradleApi()
  compileOnly deps.kotlin.gradlePlugin
  kapt deps.autoService.compiler
  compileOnly deps.autoService.annotations

  fixtureClasspath deps.kotlin.gradlePlugin

  testImplementation deps.junit
  testImplementation deps.truth
  testImplementation gradleTestKit()
}

gradlePlugin {
  plugins {
    confundus {
      id = "com.jakewharton.confundus"
      displayName = "unsafeCast for Kotlin/JVM"
      description = "A port of Kotlin/JS's unsafeCast for Kotlin/JVM"
      implementationClass = "com.jakewharton.confundus.gradle.ConfundusPlugin"
    }
  }
}

test {
  dependsOn(':confundus-api:installArchives')
  dependsOn(':confundus-compiler:installArchives')
}

def versionDirectory = "$buildDir/generated/version/"

sourceSets {
  main.java.srcDir versionDirectory
}

task pluginVersion {
  def outputDir = file(versionDirectory)

  inputs.property 'version', project.version
  outputs.dir outputDir

  doLast {
    def versionFile = file("$outputDir/com/jakewharton/confundus/gradle/version.kt")
    versionFile.parentFile.mkdirs()
    versionFile.text = """// Generated file. Do not edit!
package com.jakewharton.confundus.gradle

internal const val confundusVersion = "${project.version}"
"""
  }
}

tasks.getByName('compileKotlin').dependsOn('pluginVersion')
